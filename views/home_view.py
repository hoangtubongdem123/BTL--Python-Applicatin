import tkinter as tk
from tkinter import messagebox, ttk
import pandas as pd
from controllers.LibraryManagement import LibraryManagement


class HomeView(tk.Tk):
    def __init__(self, username):
        super().__init__()
        self.username = username
        self.controller = LibraryManagement(self)
        self.title("Trang Ch·ªß - Qu·∫£n L√Ω Th∆∞ Vi·ªán")


        self.configure(bg="#f0f0f0")  # M√†u n·ªÅn

        # CƒÉn gi·ªØa c·ª≠a s·ªï
        self.center_window(1200, 800)

        # Sidebar menu (ch·ª©c nƒÉng)
        self.sidebar = tk.Frame(self, width=200, bg="#4CAF50")
        self.sidebar.pack(side="left", fill="y")

        # N·ªôi dung ch√≠nh
        self.main_frame = tk.Frame(self, bg="white")
        self.main_frame.pack(side="right", expand=True, fill="both")

        # Danh s√°ch c√°c ch·ª©c nƒÉng
        self.buttons = [
            ("üìö Qu·∫£n l√Ω S√°ch", self.show_books),
            ("üìñ Phi·∫øu M∆∞·ª£n S√°ch", self.show_borrow),
            ("üìú Phi·∫øu Tr·∫£ S√°ch", self.show_return),
            ("üë§ Th√†nh Vi√™n", self.show_members),
            ("üìä Th·ªëng K√™", self.show_statistics),
            ("üî¥ ƒêƒÉng Xu·∫•t", self.logout)
        ]

        # Hi·ªÉn th·ªã c√°c n√∫t trong sidebar
        for text, command in self.buttons:
            btn = tk.Button(self.sidebar, text=text, command=command, bg="#ffffff", fg="black", font=("Arial", 12), padx=10, pady=5)
            btn.pack(fill="x", pady=5)

        # Hi·ªÉn th·ªã m√†n h√¨nh m·∫∑c ƒë·ªãnh l√† qu·∫£n l√Ω s√°ch
        self.show_books()

    def center_window(self, width, height):
        """CƒÉn gi·ªØa c·ª≠a s·ªï"""
        screen_width = self.winfo_screenwidth()
        screen_height = self.winfo_screenheight()
        x = (screen_width - width) // 2
        y = (screen_height - height) // 2
        self.geometry(f"{width}x{height}+{x}+{y}")

    def clear_main_frame(self):
        """X√≥a n·ªôi dung hi·ªán t·∫°i"""
        for widget in self.main_frame.winfo_children():
            widget.destroy()

    def show_books(self):
        """Hi·ªÉn th·ªã danh s√°ch s√°ch t·ª´ file Excel"""
        self.clear_main_frame()

        # T·∫°o frame ch·ª©a ti√™u ƒë·ªÅ v√† n√∫t th√™m s√°ch
        header_frame = tk.Frame(self.main_frame, bg="white")
        header_frame.pack(fill="x", pady=10, padx=10)

        tk.Label(header_frame, text="üìö Qu·∫£n l√Ω S√°ch", font=("Arial", 16, "bold"), bg="white").pack(side="left")

        add_book_btn = tk.Button(header_frame, text="‚ûï Th√™m S√°ch", command=self.controller.add_book, bg="blue",
                                 fg="white", font=("Arial", 12))
        add_book_btn.pack(side="right")

        # T·∫°o b·∫£ng danh s√°ch s√°ch
        columns = ("ID", "T√™n S√°ch", "T√°c Gi·∫£", "Th·ªÉ Lo·∫°i","S·ªë L∆∞·ª£ng ")
        self.book_table = ttk.Treeview(self.main_frame, columns=columns, show="headings")

        for col in columns:
            self.book_table.heading(col, text=col)
            self.book_table.column(col, anchor="center")

        self.book_table.pack(fill="both", expand=True, padx=10, pady=5)

        # T·∫°o menu chu·ªôt ph·∫£i
        self.context_menu = tk.Menu(self, tearoff=0)
        self.context_menu.add_command(label="‚úèÔ∏è S·ª≠a", command=self.edit_book)
        self.context_menu.add_command(label="‚ùå X√≥a", command=self.delete_book)

        # G√°n s·ª± ki·ªán chu·ªôt ph·∫£i cho b·∫£ng
        self.book_table.bind("<Button-2>", self.show_context_menu)

        # ƒê·ªçc d·ªØ li·ªáu t·ª´ file Excel
        try:
            df = pd.read_excel("books.xlsx")  # ƒê·ªçc file Excel
            for _, row in df.iterrows():
                self.book_table.insert("", "end", values=(row["ID"], row["T√™n S√°ch"], row["T√°c Gi·∫£"], row["Th·ªÉ Lo·∫°i"],row["S·ªë L∆∞·ª£ng"]))
        except FileNotFoundError:
            messagebox.showerror("L·ªói", "Kh√¥ng t√¨m th·∫•y file books.xlsx!")

    def show_context_menu(self, event):
        """Hi·ªÉn th·ªã menu chu·ªôt ph·∫£i khi click v√†o m·ªôt d√≤ng trong b·∫£ng"""
        selected_item = self.book_table.identify_row(event.y)  # L·∫•y ID d√≤ng ƒë∆∞·ª£c click
        if selected_item:
            self.book_table.selection_set(selected_item)  # Ch·ªçn d√≤ng
            self.context_menu.post(event.x_root, event.y_root)  # Hi·ªÉn th·ªã menu t·∫°i v·ªã tr√≠ chu·ªôt


    def edit_book(self):
        """H√†m x·ª≠ l√Ω khi nh·∫•n S·ª≠a s√°ch"""
        selected_item = self.book_table.selection()
        if selected_item:
            item_values = self.book_table.item(selected_item, "values")
            book_id = item_values[0]  # ID c·ªßa s√°ch c·∫ßn s·ª≠a
            messagebox.showinfo("S·ª≠a S√°ch", f"B·∫°n mu·ªën s·ª≠a s√°ch c√≥ ID: {book_id}")
            # B·∫°n c√≥ th·ªÉ m·ªü c·ª≠a s·ªï s·ª≠a s√°ch ·ªü ƒë√¢yf

    def delete_book(self):
        """H√†m x·ª≠ l√Ω khi nh·∫•n X√≥a s√°ch"""
        selected_item = self.book_table.selection()
        if selected_item:
            item_values = self.book_table.item(selected_item, "values")
            book_id = item_values[0]  # ID c·ªßa s√°ch c·∫ßn x√≥a

            confirm = messagebox.askyesno("X√≥a S√°ch", f"B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a s√°ch c√≥ ID: {book_id}?")
            if confirm:
                self.book_table.delete(selected_item)  # X√≥a tr√™n giao di·ªán
                # X·ª≠ l√Ω x√≥a trong file Excel t·∫°i ƒë√¢y (ƒë·ªçc file, x√≥a d√≤ng, l∆∞u l·∫°i)
                messagebox.showinfo("X√≥a Th√†nh C√¥ng", f"ƒê√£ x√≥a s√°ch c√≥ ID: {book_id}")

    def show_borrow(self):
        """Hi·ªÉn th·ªã danh s√°ch phi·∫øu m∆∞·ª£n/tr·∫£ s√°ch"""
        self.clear_main_frame()
        tk.Label(self.main_frame, text="üìñ Danh S√°ch Phi·∫øu M∆∞·ª£n", font=("Arial", 16, "bold")).pack(pady=10)

        # T·∫°o b·∫£ng danh s√°ch phi·∫øu m∆∞·ª£n
        columns = ("M√£ Phi·∫øu", "M√£ Th√†nh Vi√™n", "M√£ S√°ch", "S·ªë L∆∞·ª£ng","Ng√†y M∆∞·ª£n","Ng√†y Tr·∫£ D·ª± Ki·∫øn")
        borrow_table = ttk.Treeview(self.main_frame, columns=columns, show="headings")
        btn_add_borrow = tk.Button(self.main_frame, text="‚ûï Th√™m Phi·∫øu M∆∞·ª£n", command=self.controller.borrow_books,
                                   bg="blue", fg="white")

        btn_add_borrow.pack(pady=5)
        for col in columns:
            borrow_table.heading(col, text=col)
            borrow_table.column(col, anchor="center")

        borrow_table.pack(fill="both", expand=True, padx=10, pady=5)

        # ƒê·ªçc d·ªØ li·ªáu t·ª´ file Excel
        try:
            df = pd.read_excel("borrow_records.xlsx")  # ƒê·ªçc file Excel
            for _, row in df.iterrows():
                borrow_table.insert("", "end",
                                    values=(row["M√£ Phi·∫øu"], row["M√£ Th√†nh Vi√™n"], row["M√£ S√°ch"], row["S·ªë L∆∞·ª£ng"],row["Ng√†y M∆∞·ª£n"],row["Ng√†y Tr·∫£ D·ª± Ki·∫øn"]))
        except FileNotFoundError:
            messagebox.showerror("L·ªói", "Kh√¥ng t√¨m th·∫•y file borrow_records.xlsx!")

    def show_context_menu_cua_phieutra(self, event):
        """Hi·ªÉn th·ªã menu chu·ªôt ph·∫£i tr√™n danh s√°ch phi·∫øu tr·∫£"""
        if not hasattr(self, "return_table") or self.return_table is None:
            return  # N·∫øu b·∫£ng kh√¥ng t·ªìn t·∫°i, tho√°t lu√¥n

        selected_item = self.return_table.identify_row(event.y)
        if not selected_item:
            return  # N·∫øu kh√¥ng c√≥ d√≤ng n√†o, kh√¥ng hi·ªÉn th·ªã menu

        self.context_menu.post(event.x_root, event.y_root)

    def show_return(self):
        """Hi·ªÉn th·ªã danh s√°ch phi·∫øu tr·∫£ t·ª´ file Excel"""
        self.clear_main_frame()


        # T·∫°o frame ch·ª©a ti√™u ƒë·ªÅ


        header_frame = tk.Frame(self.main_frame, bg="white")
        header_frame.pack(fill="x", pady=10, padx=10)

        tk.Label(header_frame, text="üìÑ Qu·∫£n l√Ω Phi·∫øu Tr·∫£", font=("Arial", 16, "bold"), bg="white").pack(side="left")

        add_return_btn = tk.Button(header_frame, text="‚ûï Th√™m Phi·∫øu Tr·∫£", command=self.controller.return_books, bg="blue",
                                 fg="white", font=("Arial", 12))
        add_return_btn.pack(side="right")

        # T·∫°o b·∫£ng danh s√°ch phi·∫øu tr·∫£
        columns = (
        "M√£ Phi·∫øu", "M√£ Th√†nh Vi√™n", "M√£ S√°ch", "S·ªë L∆∞·ª£ng", "Ng√†y M∆∞·ª£n", "Ng√†y Tr·∫£ D·ª± Ki·∫øn", "Ng√†y Tr·∫£ Th·ª±c T·∫ø")
        self.return_table = ttk.Treeview(self.main_frame, columns=columns, show="headings")

        for col in columns:
            self.return_table.heading(col, text=col)
            self.return_table.column(col, anchor="center")

        self.return_table.pack(fill="both", expand=True, padx=10, pady=5)

        # T·∫°o menu chu·ªôt ph·∫£i
        self.context_menu = tk.Menu(self, tearoff=0)
        self.context_menu.add_command(label="‚úèÔ∏è S·ª≠a")
        self.context_menu.add_command(label="‚ùå X√≥a")


        # G√°n s·ª± ki·ªán chu·ªôt ph·∫£i cho b·∫£ng
        self.return_table.bind("<Button-2>", self.show_context_menu_cua_phieutra)

        # ƒê·ªçc d·ªØ li·ªáu t·ª´ file Excel
        try:
            df = pd.read_excel("return_records.xlsx")  # ƒê·ªçc file Excel
            for _, row in df.iterrows():
                self.return_table.insert("", "end", values=(
                    row["M√£ Phi·∫øu"], row["M√£ Th√†nh Vi√™n"], row["M√£ S√°ch"], row["S·ªë L∆∞·ª£ng"],
                    row["Ng√†y M∆∞·ª£n"], row["Ng√†y Tr·∫£ D·ª± Ki·∫øn"], row["Ng√†y Tr·∫£ Th·ª±c T·∫ø"]
                ))
        except FileNotFoundError:
            messagebox.showerror("L·ªói", "Kh√¥ng t√¨m th·∫•y file return_records.xlsx!")
    def show_members(self):
        """Hi·ªÉn th·ªã danh s√°ch th√†nh vi√™n"""
        self.clear_main_frame()
        tk.Label(self.main_frame, text="üë§ Th√†nh Vi√™n", font=("Arial", 16, "bold")).pack(pady=10)

    def show_statistics(self):
        """Hi·ªÉn th·ªã th·ªëng k√™ th∆∞ vi·ªán"""
        self.clear_main_frame()
        tk.Label(self.main_frame, text="üìä Th·ªëng K√™", font=("Arial", 16, "bold")).pack(pady=10)

    def show_members(self):
        """Hi·ªÉn th·ªã danh s√°ch th√†nh vi√™n"""
        self.clear_main_frame()
        tk.Label(self.main_frame, text="üë§ Danh S√°ch Th√†nh Vi√™n", font=("Arial", 16, "bold")).pack(pady=10)

        # T·∫°o b·∫£ng danh s√°ch th√†nh vi√™n
        columns = ("ID", "T√™n Th√†nh Vi√™n", "Email", "S·ªë ƒêi·ªán Tho·∫°i")
        self.member_table = ttk.Treeview(self.main_frame, columns=columns, show="headings")

        for col in columns:
            self.member_table.heading(col, text=col)
            self.member_table.column(col, anchor="center")

        self.member_table.pack(fill="both", expand=True, padx=10, pady=5)

        # N√∫t th√™m th√†nh vi√™n
        tk.Button(self.main_frame, text="‚ûï Th√™m Th√†nh Vi√™n",command=self.controller.add_member, bg="blue", fg="white",
                  font=("Arial", 12)).pack(pady=10)

        # ƒê·ªçc d·ªØ li·ªáu t·ª´ file Excel
        try:
            df = pd.read_excel("members.xlsx")  # ƒê·ªçc file Excel
            for _, row in df.iterrows():
                self.member_table.insert("", "end", values=(row["ID"], row["T√™n"], row["Email"], row["SƒêT"]))
        except FileNotFoundError:
            messagebox.showerror("L·ªói", "Kh√¥ng t√¨m th·∫•y file members.xlsx!")

    def logout(self):
        """ƒêƒÉng xu·∫•t v√† quay l·∫°i ƒëƒÉng nh·∫≠p"""
        self.destroy()
        messagebox.showinfo("Th√¥ng b√°o", "B·∫°n ƒë√£ ƒëƒÉng xu·∫•t th√†nh c√¥ng!")


a = HomeView("tung")

a.mainloop()





